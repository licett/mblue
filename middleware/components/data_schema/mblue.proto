syntax = "proto2";
import "nanopb.proto"; 

message dl_rpc_header {
	required string method_name = 1 [(nanopb).max_size = 32];
	required int32 layout_index = 2;
}

message dl_array {
	required bytes data = 1;
}

message dl_at_request {
	required int32 at_set = 1;
	required int32 cmd_index = 2;
	required bytes data = 3;
}

message dl_uart_request {
	required int32 com = 1;
	required bytes data = 2;
}

message dl_uart_response {
	required int32 len = 1;
}

message dl_mblue_message {
	optional uint32 magic = 1;
	required uint32 info = 2;
	required uint32 code = 3;
	optional bytes src = 4;
	optional bytes dst = 5;
	required bytes data = 6;
}

message dl_1 {
	required int32 num = 1;
}
message dl_11 {
	required int32 num1 = 1;
	required int32 num2 = 2;
}
message dl_111 {
	required int32 num1 = 1;
	required int32 num2 = 2;
	required int32 num3 = 3;
}
message dl_1111 {
	required int32 num1 = 1;
	required int32 num2 = 2;
	required int32 num3 = 3;
	required int32 num4 = 4;
}
message dl_12 {
	required int32 num = 1;
	required bytes data = 2;
}
message dl_112 {
	required int32 num1 = 1;
	required int32 num2 = 2;
	required bytes data = 3;
}
message dl_113 {
	required int32 num1 = 1;
	required int32 num2 = 2;
	required string data = 3;
}
message dl_1112 {
	required int32 num1 = 1;
	required int32 num2 = 2;
	required int32 num3 = 3;
	required bytes data = 4;
}

message dl_server_init {
	required string channel = 1 [(nanopb).max_size = 16];
	required string product = 2 [(nanopb).max_size = 16];
	required int32 device_type = 3;
	required string device_id = 4 [(nanopb).max_size = 28];
	required string imei = 5 [(nanopb).max_size = 16];
	required string iccid = 6 [(nanopb).max_size = 24];
	required string firmware_version = 7 [(nanopb).max_size = 16];
}
message dl_server_touch {
	required int32 lng = 1;
	required int32 lat = 2;
	required int32 satellites = 3;
	required int32 power = 4;
	required int32 rssi = 5;
	required int32 interval = 6;
	required int32 type = 7;
	required int32 acc = 8;
}
message dl_server_event {
	required int32 type = 1;
	optional int32 value = 2;
}

message dl_server_setup {
	required int32 key = 1;
	optional int32 value = 2;
}
message dl_ack {
	required int32 ack = 1;
	required int32 seq = 2;
}
